{"version":3,"file":"parser.js","sourceRoot":"","sources":["../src/parser.ts"],"names":[],"mappings":"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","sourcesContent":["// MIT License\n//\n// Copyright (c) 2020 Datasert Inc\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nexport interface PlainObject<T> {\n  [key: string]: T;\n}\n\nexport interface ParseOptions {\n  hasSeconds?: boolean;\n}\n\nexport interface CronRange {\n  from: number;\n  to: number;\n}\n\nexport interface CronStep {\n  from: number;\n  to: number;\n  step: number;\n}\n\nexport interface CronNth {\n  day_of_week: number;\n  instance: number;\n}\n\nexport interface CronField {\n  all?: boolean;\n  omit?: boolean;\n  ranges?: CronRange[];\n  steps?: CronStep[];\n  nthDays?: CronNth[];\n  values?: number[];\n  lastDay?: boolean;\n  lastDays?: number[];\n  lastWeekday?: boolean;\n  nearestWeekdays?: number[];\n}\n\nexport interface CronExpr extends PlainObject<CronField> {}\n\nexport interface CronExprs {\n  pattern: string;\n  expressions: CronExpr[];\n}\n\nconst VAL_L = 'l';\nconst VAL_W = 'w';\nconst VAL_LW = 'lw';\nconst VAL_Q = '?';\nconst VAL_HASH = '#';\nconst VAL_STAR = '*';\nconst VAL_DASH = '-';\nconst VAL_SLASH = '/';\n\nconst PREDEFINED_EXPRS: PlainObject<string> = {\n  '@yearly': '0 0 1 1 ?',\n  '@monthly': '0 0 1 * ?',\n  '@weekly': '0 0 ? * 0',\n  '@daily': '0 0 * * ?',\n  '@hourly': '0 * * * ?',\n};\n\nconst SECOND = 'second';\nconst MINUTE = 'minute';\nconst HOUR = 'hour';\nconst DAY_OF_MONTH = 'day_of_month';\nconst MONTH = 'month';\nconst DAY_OF_WEEK = 'day_of_week';\nconst YEAR = 'year';\nconst FIELDS = [SECOND, MINUTE, HOUR, DAY_OF_MONTH, MONTH, DAY_OF_WEEK, YEAR];\n\ninterface FieldInfo {\n  min: number;\n  max: number;\n  alias?: PlainObject<number>;\n}\n\nconst FIELD_INFO: PlainObject<FieldInfo> = {\n  [SECOND]: {\n    min: 0,\n    max: 59,\n  },\n  [MINUTE]: {\n    min: 0,\n    max: 59,\n  },\n  [HOUR]: {\n    min: 0,\n    max: 23,\n  },\n  [DAY_OF_MONTH]: {\n    min: 1,\n    max: 31,\n  },\n  [MONTH]: {\n    min: 1,\n    max: 12,\n    alias: {\n      jan: 1,\n      feb: 2,\n      mar: 3,\n      apr: 4,\n      may: 5,\n      jun: 6,\n      jul: 7,\n      aug: 8,\n      sep: 9,\n      oct: 10,\n      nov: 11,\n      dec: 12,\n    },\n  },\n  [DAY_OF_WEEK]: {\n    min: 0,\n    max: 7,\n    alias: {\n      7: 0,\n      sun: 0,\n      mon: 1,\n      tue: 2,\n      wed: 3,\n      thu: 4,\n      fri: 5,\n      sat: 6,\n    },\n  },\n  [YEAR]: {\n    min: 1970,\n    max: 3000,\n  },\n};\n\nfunction isTrue(val: any) {\n  return val && val.toString() === 'true';\n}\n\nfunction dedupe(inArray: any[], keySupplier = (it: any) => it) {\n  const seen = new Set();\n  const deduped: any[] = [];\n\n  inArray.forEach((x: any) => {\n    const keyValue = keySupplier(x);\n    if (!seen.has(keyValue)) {\n      seen.add(keyValue);\n      deduped.push(x);\n    }\n  });\n\n  return deduped;\n}\n\nfunction splitAndCleanup(input: string, sep: string) {\n  return dedupe(\n    input\n      .split(sep)\n      .map((part) => part.trim())\n      .filter((part) => part)\n  );\n}\n\nfunction invalidExpr(expr: string, msg: string) {\n  return new Error(`Invalid cron expression [${expr}]. ${msg}`);\n}\n\nfunction parseField(expr: string, field: string, value: string): CronField {\n  value = value.toLowerCase().trim();\n\n  if (value === VAL_STAR) {\n    return {all: true};\n  }\n\n  if (value === VAL_Q) {\n    return parseQ(expr, field, value);\n  }\n\n  const parts: string[] = splitAndCleanup(value, ',');\n  const parsed: CronField = {};\n\n  for (const part of parts) {\n    if (!part) {\n      continue;\n    }\n\n    if (part.indexOf(VAL_SLASH) >= 0) {\n      parsed.steps = parsed.steps || [];\n      parsed.steps.push(parseStepRange(expr, field, part));\n    } else if (part.indexOf(VAL_DASH) >= 0) {\n      parsed.ranges = parsed.ranges || [];\n      parsed.ranges.push(parseRange(expr, field, part));\n    } else if (part.indexOf(VAL_HASH) >= 0) {\n      parsed.nthDays = parsed.nthDays || [];\n      parsed.nthDays.push(parseNth(expr, field, part));\n    } else if (part === VAL_L) {\n      parsed.lastDay = parseL(expr, field, part);\n    } else if (part === VAL_LW) {\n      parsed.lastWeekday = parseLW(expr, field, part);\n    } else if (field === DAY_OF_MONTH && part.indexOf(VAL_W) >= 0) {\n      parsed.nearestWeekdays = parsed.nearestWeekdays || [];\n      parsed.nearestWeekdays.push(parseNearestWeekday(expr, field, part));\n    } else if (field === DAY_OF_WEEK && part.endsWith(VAL_L)) {\n      parsed.lastDays = parsed.lastDays || [];\n      parsed.lastDays.push(parseLastDays(expr, field, part));\n    } else {\n      parsed.values = parsed.values || [];\n      parsed.values.push(parseValue(expr, field, part));\n    }\n  }\n\n  if (parsed.values) {\n    parsed.values = dedupe(parsed.values);\n  }\n\n  return parsed;\n}\n\nfunction parseL(expr: string, field: string, value: string): boolean {\n  if (field === DAY_OF_WEEK || field === DAY_OF_MONTH) {\n    return true;\n  }\n\n  throw invalidExpr(\n    expr,\n    `Invalid value for [${value}] for field [${field}]. It can be used only for [${DAY_OF_MONTH} or ${DAY_OF_WEEK}] fields.`\n  );\n}\n\nfunction parseQ(expr: string, field: string, value: string): CronField {\n  if (field === DAY_OF_WEEK || field === DAY_OF_MONTH) {\n    return {omit: true};\n  }\n\n  throw invalidExpr(\n    expr,\n    `Invalid Value [${value}] for field [${field}]. It can be specified only for [${DAY_OF_MONTH} or ${DAY_OF_WEEK}] fields.`\n  );\n}\n\nfunction parseLW(expr: string, field: string, value: string): boolean {\n  if (field === DAY_OF_MONTH) {\n    return true;\n  }\n\n  throw invalidExpr(\n    expr,\n    `Invalid value for [${value}] for field [${field}]. It can be used only for [${DAY_OF_MONTH}] fields.`\n  );\n}\n\nfunction parseValue(expr: string, field: string, value: string): number {\n  const num = parseNumber(expr, field, value);\n  const info = FIELD_INFO[field];\n  if (num < info.min) {\n    throw invalidExpr(\n      expr,\n      `Value [${value}] out of range for field [${field}]. It must be greater than or equals to [${info.min}].`\n    );\n  }\n\n  if (info.max && num > info.max) {\n    throw invalidExpr(\n      expr,\n      `Value [${value}] out of range for field [${field}]. It must be less than or equals to [${info.max}].`\n    );\n  }\n\n  return num;\n}\n\nfunction parseStepRange(expr: string, field: string, value: string): CronStep {\n  const parts = value.split(VAL_SLASH);\n  if (parts.length != 2) {\n    throw invalidExpr(\n      expr,\n      `Invalid step range [${value}] for field [${field}]. Expected exactly 2 values separated by a / but got [${parts.length}] values.`\n    );\n  }\n\n  const info = FIELD_INFO[field];\n  const fromParts = parts[0].indexOf(VAL_DASH) >= 0 ? parts[0].split(VAL_DASH) : [parts[0]];\n  const from = parseNumber(expr, field, unalias(field, fromParts[0] === VAL_STAR ? info.min.toString() : fromParts[0]));\n  const to = parseNumber(expr, field, unalias(field, fromParts.length > 1 ? fromParts[1] : info.max.toString()));\n  const step = parseNumber(expr, field, unalias(field, parts[1]));\n\n  if (from < info.min) {\n    throw invalidExpr(\n      expr,\n      `Invalid step range [${value}] for field [${field}]. From value [${from}] out of range. It must be greater than or equals to [${info.min}]`\n    );\n  }\n\n  if (to > info.max) {\n    throw invalidExpr(\n      expr,\n      `Invalid step range [${value}] for field [${field}]. To value [${to}] out of range. It must be less than or equals to [${info.max}]`\n    );\n  }\n\n  if (step > info.max) {\n    throw invalidExpr(\n      expr,\n      `Invalid step range [${value}] for field [${field}]. Step value [${value}] out of range. It must be less than or equals to [${info.max}]`\n    );\n  }\n\n  return {from, to, step};\n}\n\nfunction parseNth(expr: string, field: string, value: string): CronNth {\n  if (field !== DAY_OF_WEEK) {\n    throw invalidExpr(\n      expr,\n      `Invalid value [${value}] for field [${field}]. Nth day can be used only in [${DAY_OF_WEEK}] field.`\n    );\n  }\n\n  const parts = value.split(VAL_HASH);\n  if (parts.length !== 2) {\n    throw invalidExpr(\n      expr,\n      `Invalid nth day value [${value}] for field [${field}]. It must be in [${DAY_OF_WEEK}#instance] format.`\n    );\n  }\n\n  const day_of_week = parseNumber(expr, field, parts[0]);\n  const instance = parseNumber(expr, undefined, parts[1]);\n\n  if (instance < 1 || instance > 5) {\n    throw invalidExpr(\n      expr,\n      `Invalid Day of Week instance value [${instance}] for field [${field}]. It must be between 1 and 5.`\n    );\n  }\n\n  return {\n    day_of_week,\n    instance: instance,\n  };\n}\n\nfunction parseNearestWeekday(expr: string, field: string, value: string): number {\n  if (field !== DAY_OF_MONTH) {\n    throw invalidExpr(\n      expr,\n      `Invalid value [${value}] for field [${field}]. Nearest weekday can be used only in [${DAY_OF_MONTH}] field.`\n    );\n  }\n\n  return parseNumber(expr, field, value.split(VAL_W)[0]);\n}\n\nfunction parseLastDays(expr: string, field: string, value: string): number {\n  return parseNumber(expr, field, value.split(VAL_L)[0]);\n}\n\nfunction parseRange(expr: string, field: string, value: string) {\n  const parts = value.split(VAL_DASH);\n\n  if (parts.length != 2) {\n    throw invalidExpr(\n      expr,\n      `Invalid range [${value}] for field [${field}]. Range should have two values separated by a - but got [${parts.length}] values.`\n    );\n  }\n\n  const from = parseNumber(expr, field, unalias(field, parts[0]));\n  let to = parseNumber(expr, field, unalias(field, parts[1]));\n\n  // For day of week, sun will act as 0 or 7 depending on if it is in from or to\n  if (field == DAY_OF_WEEK) {\n    if (to === 0) {\n      to = 7;\n    }\n  }\n\n  if (from >= to) {\n    throw invalidExpr(expr, `Invalid range [${value}] for field [${field}]. From value must be less than to value.`);\n  }\n\n  const info = FIELD_INFO[field];\n\n  if (from < info.min || to > info.max) {\n    throw invalidExpr(\n      expr,\n      `Invalid range [${value}] for field [${field}]. From or to value is out of allowed min/max values. Allowed values are between [${info.min}-${info.max}].`\n    );\n  }\n\n  return {from, to};\n}\n\nfunction parseNumber(expr: string, field: string | undefined, value: string) {\n  const num = parseInt(unalias(field, value), 10);\n  if (Number.isNaN(num)) {\n    throw invalidExpr(expr, `Invalid numeric value [${value}] in field [${field}].`);\n  }\n  return num;\n}\n\nfunction unalias(field: string | undefined, value: string) {\n  if (!field) {\n    return value;\n  }\n\n  const info = FIELD_INFO[field];\n  const unaliased = (info.alias || {})[value];\n  return unaliased === undefined ? value : unaliased.toString();\n}\n\nfunction parseExpr(expr: string, options: ParseOptions) {\n  if (!expr) {\n    throw new Error(`Cron expression cannot be blank`);\n  }\n\n  let exprInternal = expr;\n\n  let hasSeconds = options.hasSeconds;\n  if (PREDEFINED_EXPRS[exprInternal]) {\n    exprInternal = PREDEFINED_EXPRS[expr];\n    hasSeconds = false;\n  }\n\n  const minFields = hasSeconds ? 5 : 4;\n  const maxFields = hasSeconds ? 7 : 6;\n\n  const parts = exprInternal\n    .split(/\\s+/)\n    .map((part) => part.trim())\n    .filter((part) => part);\n\n  if (parts.length < minFields || parts.length > maxFields) {\n    throw new Error(\n      `Invalid cron expression [${expr}]. Expected [${minFields} to ${maxFields}] fields but found [${parts.length}] fields.`\n    );\n  }\n\n  // If seconds is not specified, then defaults to 0th sec\n  if (!hasSeconds) {\n    parts.unshift('0');\n  }\n\n  // If day of week is not specified, will default to ?\n  if (parts.length === 5) {\n    parts.push(VAL_Q);\n  }\n\n  // If year is not specified, then default to *\n  if (parts.length === 6) {\n    parts.push(VAL_STAR);\n  }\n\n  const fieldParts: PlainObject<string> = {};\n  for (let i = 0; i < FIELDS.length; i++) {\n    fieldParts[FIELDS[i]] = parts[i];\n  }\n\n  const parsed: CronExpr = {};\n  for (const field of FIELDS) {\n    if (field === SECOND && !hasSeconds) {\n      parsed[field] = {omit: true};\n    } else {\n      parsed[field] = parseField(expr, field, fieldParts[field]);\n    }\n  }\n\n  return parsed;\n}\n\nexport function parse(exprs: string, options: ParseOptions = {}) {\n  if (!exprs) {\n    throw new Error(`Cron expression cannot be blank`);\n  }\n\n  options.hasSeconds = isTrue(options.hasSeconds);\n  const resp: CronExprs = {\n    pattern: exprs,\n    expressions: splitAndCleanup(exprs, '|').map((expr) => parseExpr(expr, options)),\n  };\n\n  return resp;\n}\n"]}